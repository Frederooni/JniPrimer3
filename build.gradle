
plugins {
    id 'jni-library'
}

/*
sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    testImplementation "junit:junit:4.12"
}
*/

/*
 * There is currently no "C application" plugin, so this build uses the
 * "C++ application" plugin and then reconfigures it to build C instead.
 */

import org.gradle.internal.jvm.Jvm

library {
    binaries.configureEach { CppBinary binary ->
        def compileTask = binary.compileTask.get()

        compileTask.source.from fileTree(dir: "src/main/cpp", include: "**/*.c")

        def toolChain = binary.toolChain
        if (toolChain instanceof VisualCpp) {
            compileTask.compilerArgs.addAll(["/TC"])
        } else if (toolChain instanceof GccCompatibleToolChain) {
            compileTask.compilerArgs.addAll(["-x", "c", "-std=c11"])
        }
    }
}

jar {
    manifest {
        attributes('Main-Class': 'edu.msu.cme.rdp.primerdesign.utils.Primer3Wrapper')
    }
}
